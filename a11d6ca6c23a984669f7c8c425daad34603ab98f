{
  "comments": [
    {
      "key": {
        "uuid": "a458cbdc_3cf7394d",
        "filename": "driver/llvm-goc.cpp",
        "patchSetId": 5
      },
      "lineNbr": 850,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-30T19:08:17Z",
      "side": 1,
      "message": "If -emit-llvm is set, we should stop adding backend passes, right?",
      "revId": "a11d6ca6c23a984669f7c8c425daad34603ab98f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "611bd603_501a559b",
        "filename": "driver/llvm-goc.cpp",
        "patchSetId": 5
      },
      "lineNbr": 850,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-04-30T19:39:43Z",
      "side": 1,
      "message": "Thanks, yes, I think this needs attention.\n\nThe way clang currently works, if you do:\n\n clang -emit-llvm -o file.bc -O2 foo.c\n\nit will run the LLVM passes up until the target-specific portion, then stop (equivalent of \"opt\" but not \"llc\"). If you want to turn off all optimizations passes and get post-FE bitcode you have to do:\n\n  clang -Xclang -disable-llvm-passes -emit-llvm -o file.bc -O2 foo.c\n\nI think what I will do is add in \"-disable-llvm-passes\" as a top level option to try to be as consistent with clang as I can.",
      "parentUuid": "a458cbdc_3cf7394d",
      "revId": "a11d6ca6c23a984669f7c8c425daad34603ab98f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dd2bc4d_3bac1c9a",
        "filename": "driver/llvm-goc.cpp",
        "patchSetId": 5
      },
      "lineNbr": 850,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-30T19:48:16Z",
      "side": 1,
      "message": "Interesting. Probably we should stop here, with function/module passes added, but not adding codegen passes?",
      "parentUuid": "611bd603_501a559b",
      "revId": "a11d6ca6c23a984669f7c8c425daad34603ab98f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27dae444_448ed317",
        "filename": "driver/llvm-goc.cpp",
        "patchSetId": 5
      },
      "lineNbr": 899,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-04-30T19:08:17Z",
      "side": 1,
      "message": "If we are emitting object file and -o is set, it looks like it will print something like\nllvm-goc -S x.go -o x.o ?\nSeems a little weird that -S emits a .o file.\n\nProbably we should -o in the command line, and always print -o asmOutFileName_.",
      "revId": "a11d6ca6c23a984669f7c8c425daad34603ab98f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba6fb529_8220e008",
        "filename": "driver/llvm-goc.cpp",
        "patchSetId": 5
      },
      "lineNbr": 899,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-04-30T19:39:43Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "27dae444_448ed317",
      "revId": "a11d6ca6c23a984669f7c8c425daad34603ab98f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}