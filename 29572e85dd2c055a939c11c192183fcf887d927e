{
  "comments": [
    {
      "key": {
        "uuid": "6122fb33_3bcd3211",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Agree that it would nice to have this working eventually.",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1cd8895_e452b331",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "this might be better off as a static member of the GoStatepoints class  (as is \"ID\" is easily confused with the pass identification ID). Also, I assume that statepoint IDs only have to be unique within the scope of a given function, is this correct? So we should zero at start of each func?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "674265a5_d00b6b38",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "Will move to the class.\n\nCurrently it is unique across a module (package). The idea is that we need a unique symbol for each safepoint. Later in codegen the stack map generation code will put stack maps to the symbols, so they can match. We could make the ID function scoped, say, by adding the function name as part of the symbol name, as long as it matches with the stack map generation code.",
      "parentUuid": "d1cd8895_e452b331",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a50a4c52_e61a903a",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Move to a header file if possible? Otherwise add note to keep in sync with other definitions?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0bca5fd_c3355bb2",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a50a4c52_e61a903a",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aba3bdc_68149b40",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 133,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "This b,lob of code looks like a duplicate of the code at line 184 -- common them up into helper?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7603eeb4_a83e56ee",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1351,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Wasn\u0027t clear to me if this was code you wrote? If so, what is a \"fused\" statepoint?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be392b99_fbad5ca7",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1351,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "No, it was just copied over. I just need a unique function, so I reused this one, for a different purpose. I\u0027ll drop the comment.",
      "parentUuid": "7603eeb4_a83e56ee",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb83851d_3c61f040",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1366,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Define in header if possible?",
      "range": {
        "startLine": 1366,
        "startChar": 29,
        "endLine": 1366,
        "endChar": 43
      },
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "318002a6_4ab4cf3d",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1366,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Would it make sense to ULEB encode, instead of rendering as text? Or would that potentially cause issues with the assembler?",
      "range": {
        "startLine": 1366,
        "startChar": 47,
        "endLine": 1366,
        "endChar": 67
      },
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9253660_dfb15c0b",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1366,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "This is part of the symbol name, so it needs to be text. This will not going into the binary (except the symbol table).",
      "parentUuid": "318002a6_4ab4cf3d",
      "range": {
        "startLine": 1366,
        "startChar": 47,
        "endLine": 1366,
        "endChar": 67
      },
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2faba92c_5f414bcf",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1366,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb83851d_3c61f040",
      "range": {
        "startLine": 1366,
        "startChar": 29,
        "endLine": 1366,
        "endChar": 43
      },
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54ce02e9_4549b7c1",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1471,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Cool. Didn\u0027t know that this was possible, but LGTM.",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa8ade8d_1f97aab5",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1618,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "Is there any way this (or some of this) could be done in the front end? Or is it the case that these situations can arise or be \"manufactured\" as a result of optimizations?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c558e6a3_342655b2",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1618,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "We might be able to do it in the front end. But there we don\u0027t yet know which slots are ambiguously live. We\u0027d need to zero all the slots. Also not sure what dead store elimination optimization would do.",
      "parentUuid": "fa8ade8d_1f97aab5",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "605a2a9d_d83348a9",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1944,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "what exactly is our working definition of a GC leaf function? I see this: https://lists.llvm.org/pipermail/llvm-dev/2015-January/080801.html ... wondering if there are things we could mark as gc-leaf in the bridge.",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fdb39f3_87f83b68",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1944,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "Good point. I completely ignored this part. It seems that GC leaf functions could be:\n- intrinsics (seems already handled),\n- actual leaf functions,\n- functions that are not preemptible, cannot block, and don\u0027t trigger GC themselves.\n\nMaybe as a start we should mark actual leaf functions as GC leaf?",
      "parentUuid": "605a2a9d_d83348a9",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d63b1f5f_ea2b03ca",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1954,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "seems like we should definitely be doing this in the bridge/frontend, I would think (since it will improve other optimizations too)?  I\u0027m kind of confused that this doesn\u0027t happen already.",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "838b0417_53ee55bc",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1954,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "Yeah, this is a good idea. Thank you for the CL.\n\nI was surprised that the optimizer does not simplify the CFG by cutting those edges.",
      "parentUuid": "d63b1f5f_ea2b03ca",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5290866f_47b9bf19",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1954,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "Done. Removed now.",
      "parentUuid": "838b0417_53ee55bc",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aad425e_66ffe46d",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2108,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "This comment wasn\u0027t written by you (was in the previous code), but in fact I totally agree with it, and it might be more important for Go given that for a JIT you\u0027d applying rewriting to only very hot functions, whereas gollvm is applying it to every function \u003d\u003e more compile time cost.",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab90586c_be6f7a34",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2180,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "maybe also Intrinsic::sideeffect or Intrinsic::assume?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbf15a7a_e5bc1133",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2180,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "Added Intrinsic::assume.\n\nIntrinsic::sideeffect doesn\u0027t take any argument, so it cannot be use.",
      "parentUuid": "ab90586c_be6f7a34",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e0f9da3_5f458fec",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2229,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "what about things like runtime.typedmemmove?",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c3f368f_50809629",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2229,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "In theory typedmemmove should not be used for stack writes. It may read the stack (i.e. src is on stack), which will be handled just like regular calls, counted as a use of src.\n\nIf typedmemmove is really called with dst on stack, currently it is treated just as a use of dst. Maybe we should treat it as an initialization? Or better, just rewrite it to a plain memmove.\n\nSeems ok at the moment. I\u0027ll see if it causes real problem.",
      "parentUuid": "1e0f9da3_5f458fec",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a114a4_b5e44ab9",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2385,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "This looks to be under \"#if NDEBUG\" which I don\u0027t think is right.\n\nFor this code, I wonder whether there is more we can do in the front end or bridge to help...",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0fd2864_8bb47b5b",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2385,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "Oops. Will fix.\n\nWe could insert zeroing in the bridge, but I\u0027m not sure if the optimizer would remove it. In fact this is only needed when the optimizer messes up our initialization sequence...",
      "parentUuid": "65a114a4_b5e44ab9",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd735336_c8fbd294",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2385,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "Done. Moved out of #if NDEBUG.\n\nI thought this a little more. In the gc compiler, for aggregate type, we emit a VARDEF pseudo-instruction after the initialization sequence and before any use. Potentially we could do something similar, say, emitting a special dummy call which will be removed after liveness. The gc compiler\u0027s optimizer preserve the memory order of this. We\u0027ll need to do something to ensure LLVM optimizer doesn\u0027t reorder it with stores or uses. Maybe use some volatile-like attribute?",
      "parentUuid": "c0fd2864_8bb47b5b",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "782b8959_2b9cdbe5",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2702,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-09-28T16:12:49Z",
      "side": 1,
      "message": "I\u0027d recommend extracting all this stuff (from here until the end of the file) out into a separate file, since it doesn\u0027t really depend on anything in lowering. That way it could be unit tested separately as well.",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d48930af_add5d7ac",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2702,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-10-10T20:29:03Z",
      "side": 1,
      "message": "Sounds good. Will do.",
      "parentUuid": "782b8959_2b9cdbe5",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1eaa35e_33a57a40",
        "filename": "passes/GoStatepoints.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2702,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-12-01T16:45:09Z",
      "side": 1,
      "message": "Done (haven\u0027t added unit test yet).",
      "parentUuid": "d48930af_add5d7ac",
      "revId": "29572e85dd2c055a939c11c192183fcf887d927e",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}