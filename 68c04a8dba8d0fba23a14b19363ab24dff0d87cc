{
  "comments": [
    {
      "key": {
        "uuid": "cbd0fbf3_b7e579c8",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "Is this to capture empty macro?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc85429c_0827322d",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "This code is present just to locate the boundary line between the macro name and the macro body, e.g. \n \n   #define FOO BAR+2\n              ^",
      "parentUuid": "cbd0fbf3_b7e579c8",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 34,
        "endChar": 3
      },
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75063e4f_aa1013c3",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "The if above should have captured VisitedEmpty.",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8259d510_da0aa2c1",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "Good point. Will revise.",
      "parentUuid": "75063e4f_aa1013c3",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c355053_4c841452",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "Should we set expect_operand here also?",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65d80677_47ee2589",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "To match GCC\u0027s implementation, no. I think the intent is to allow unary as well as binary minus, e.g. \n\n  #define FOO -BAR + ABC",
      "parentUuid": "2c355053_4c841452",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "868f05ff_ea98eb42",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "Is there a reason to do two passes?",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "324e0c10_19ef7ed7",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "Good point. I think at one point in a previous version of the code it was needed, but not here. I will remove.",
      "parentUuid": "868f05ff_ea98eb42",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4d57555_0493b5a5",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "visitMacro should catch this already, right? (by setting mstate tp VistedEmpty)",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 15
      },
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21b08512_5e906578",
        "filename": "libgo/godumpspec/mparser/macro-parser.cpp",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "Yup, good point, sorry for the sloppy code. I\u0027ll fix it up.",
      "parentUuid": "d4d57555_0493b5a5",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 234,
        "endChar": 15
      },
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "967c29c5_cc9631f6",
        "filename": "libgo/godumpspec/mparser/macro-parser.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "Would be good to have some comment about what the second arg is for.",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cc6ea38_1f7f684e",
        "filename": "libgo/godumpspec/mparser/macro-parser.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:18:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "967c29c5_cc9631f6",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dbfd955_4690e793",
        "filename": "unittests/GoDumpSpec/ParserTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "Too many empty lines.",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 104,
        "endChar": 0
      },
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f4a0da1_97c55784",
        "filename": "unittests/GoDumpSpec/ParserTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0dbfd955_4690e793",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 104,
        "endChar": 0
      },
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c023686_d819f3cc",
        "filename": "unittests/GoDumpSpec/ParserTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-14T18:19:39Z",
      "side": 1,
      "message": "In C program I think the #define\u0027d EX value would be used (I am considering\nenum { EX \u003d 9 };\n#define E1 10\n#define E2 (EX + E1)\n#define EX \"ignored\"\n).\nIs there a case that we should pick the enum value instead?",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "557d52e6_ef3ad898",
        "filename": "unittests/GoDumpSpec/ParserTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-15T17:17:09Z",
      "side": 1,
      "message": "Yes, it is counter-intuitive, but I\u0027m doing this to match the current behavior of GCC. Here is an example:\n\n% cat exs.c\nenum { EEEX \u003d 9 };\n#define EEEX 3\nint r[EEEX];\n% ./gotools/check-gcc -c -fdump-go-spec\u003dt exs.c\n% fgrep EEEX t\nconst _EEEX \u003d 9\n%\n\nI will check with Ian to make sure this is WAI.",
      "parentUuid": "9c023686_d819f3cc",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6323aa90_e08efe00",
        "filename": "unittests/GoDumpSpec/ParserTests.cpp",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-03-15T19:00:51Z",
      "side": 1,
      "message": "I wouldn\u0027t go so far as to say WAI, but it\u0027s more like who cares.  At least in gccgo this code has exactly one purpose: capture the system header values in a way that they can be used by the Go syscall and runtime packages.  If the system header files define two different values for EEEX, everything is hopeless anyhow.  There is no right answer, so we may as well pick one at random.",
      "parentUuid": "557d52e6_ef3ad898",
      "revId": "68c04a8dba8d0fba23a14b19363ab24dff0d87cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}