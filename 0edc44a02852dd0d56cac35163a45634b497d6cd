{
  "comments": [
    {
      "key": {
        "uuid": "5a2bb925_584b27f9",
        "filename": "bridge/go-llvm-bfunction.cpp",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 24534
      },
      "writtenOn": "2020-05-25T10:09:35Z",
      "side": 1,
      "message": "Should we use getABITypeAlign here ?",
      "range": {
        "startLine": 82,
        "startChar": 42,
        "endLine": 82,
        "endChar": 58
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9e3ffc_5dded9b8",
        "filename": "bridge/go-llvm-bfunction.cpp",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-05-26T11:28:09Z",
      "side": 1,
      "message": "I don\u0027t think it will matter for the architectures we care about, at least at the moment, since preferred \u003d\u003d ABI for all the Go cases.\n\nMy intent here was: if an alloca is being created for general-purpose use (for example, a temporary variable), then ABI rules are not an issue and we should just choose the preferred alignment by architecture. \n\nNow that I go back and look at it again, most of the calls to Bfunction::addAlloca() are for temps, but there is one call from Bfunction::lazyAbiSetup that is part of the ABI-related code, so perhaps you are right that this should be getABITypeAlign.",
      "parentUuid": "5a2bb925_584b27f9",
      "range": {
        "startLine": 82,
        "startChar": 42,
        "endLine": 82,
        "endChar": 58
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c72a825_83e18e64",
        "filename": "bridge/go-llvm-bfunction.cpp",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 24534
      },
      "writtenOn": "2020-05-26T12:15:23Z",
      "side": 1,
      "message": "Yeah, otherwise, on arm64, \"%x \u003d alloca i8, align 1\" becomes \"%x \u003d alloca i8, align 4\"",
      "parentUuid": "dc9e3ffc_5dded9b8",
      "range": {
        "startLine": 82,
        "startChar": 42,
        "endLine": 82,
        "endChar": 58
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b30999a9_5fb5daa5",
        "filename": "bridge/go-llvm-bnode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 24534
      },
      "writtenOn": "2020-05-25T10:09:35Z",
      "side": 1,
      "message": "getABITypeAlign ?",
      "range": {
        "startLine": 525,
        "startChar": 42,
        "endLine": 525,
        "endChar": 58
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b78a2fc8_2cf03c2f",
        "filename": "bridge/go-llvm-bnode.cpp",
        "patchSetId": 2
      },
      "lineNbr": 525,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-05-26T11:28:09Z",
      "side": 1,
      "message": "For temporaries it is safe to use getPrefTypeAlign -- a random temp within a function shouldn\u0027t have anything to do with the ABI.",
      "parentUuid": "b30999a9_5fb5daa5",
      "range": {
        "startLine": 525,
        "startChar": 42,
        "endLine": 525,
        "endChar": 58
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52fcb96f_e6f23954",
        "filename": "unittests/BackendCore/BackendExprTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1462,
      "author": {
        "id": 24534
      },
      "writtenOn": "2020-05-25T10:09:35Z",
      "side": 1,
      "message": "Should this be 4 ?",
      "range": {
        "startLine": 1461,
        "startChar": 37,
        "endLine": 1462,
        "endChar": 49
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9115069_c3162283",
        "filename": "unittests/BackendCore/BackendExprTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1462,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-05-26T11:28:09Z",
      "side": 1,
      "message": "\"a\" is a local variable, not a parameter.  If the LLVM datalayout code in question thinks it should be aligned by 8 and not 4 for performance reasons, that\u0027s fine. Having the larger alignment might make it possible to use a different instruction sequence when expanding a memcpy, for example.",
      "parentUuid": "52fcb96f_e6f23954",
      "range": {
        "startLine": 1461,
        "startChar": 37,
        "endLine": 1462,
        "endChar": 49
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce3b2c53_2568e034",
        "filename": "unittests/BackendCore/BackendExprTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1462,
      "author": {
        "id": 24534
      },
      "writtenOn": "2020-05-26T12:15:23Z",
      "side": 1,
      "message": "I don\u0027t know how llvm uses alignment for performance optimization. But simply looking at this data structure, I feel that the alignment value should be 4. Of course, if llvm sets it as 8 from the perspective of performance optimization, it is also ok. I wrote a patch, replacing all or part of getPrefTypeAlign in this patch with getABITypeAlign, which will affect some IR alignment values, including this one. I am not sure where to use getPrefTypeAlign and where to use getABITypeAlign.",
      "parentUuid": "d9115069_c3162283",
      "range": {
        "startLine": 1461,
        "startChar": 37,
        "endLine": 1462,
        "endChar": 49
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ef2a8d2_114d6032",
        "filename": "unittests/BackendCore/BackendExprTests.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1462,
      "author": {
        "id": 14020
      },
      "writtenOn": "2020-05-26T13:46:44Z",
      "side": 1,
      "message": "I spent some time looking at some of the equivalent parts of clang. It looks as though clang is still using getABITypeAlign for most temporaries (there are only a few places with getPrefTypeAlign).  I think the conservative thing is probably to do the same for gollvm. I will send a CL...",
      "parentUuid": "ce3b2c53_2568e034",
      "range": {
        "startLine": 1461,
        "startChar": 37,
        "endLine": 1462,
        "endChar": 49
      },
      "revId": "0edc44a02852dd0d56cac35163a45634b497d6cd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}