{
  "comments": [
    {
      "key": {
        "uuid": "88fb20fa_d32b3bc8",
        "filename": "libgo/godumpspec/mtokenizer/macro-tokenizer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 13315
      },
      "writtenOn": "2018-03-13T21:07:54Z",
      "side": 1,
      "message": "What about things like 1e-5? Do we process the +/- sign here? Or they don\u0027t appear in the generated macro file?",
      "revId": "b7c30a5d07c48fe5ed66500bd13d2f5fed53ef5d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "191384b6_e0132b5e",
        "filename": "libgo/godumpspec/mtokenizer/macro-tokenizer.cpp",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 14020
      },
      "writtenOn": "2018-03-14T14:22:20Z",
      "side": 1,
      "message": "A constant like 1e-5 gets split into three tokens (there\u0027s an example with similar code in the unit test, TokenizerTests.cpp line 97 BTW), e.g. \n\n    NCONST \u00271e\u0027\n    ADDSUB \u0027-\u0027\n    NCONST \u00275\u0027\n\nThe macro parser then treats this sequence of three tokens as an arithmetic op (like A+B). Kind of weird, but it seems to work.",
      "parentUuid": "88fb20fa_d32b3bc8",
      "revId": "b7c30a5d07c48fe5ed66500bd13d2f5fed53ef5d",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}