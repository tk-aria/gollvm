{
  "comments": [
    {
      "key": {
        "uuid": "e1d92413_a74b1007",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 1,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Not related to this CL, but looking at this new file makes me wonder about copyright headers.  Do the files in this repo use an appropriate copyright header?",
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d8734d8_2896a8d0",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "You only use this type once, so another approach would be to use sort.Slice.  Doesn\u0027t matter much, though.",
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3f05172_1b8e82b2",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "No need to specify the type here.",
      "range": {
        "startLine": 133,
        "startChar": 9,
        "endLine": 133,
        "endChar": 23
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adae30aa_4aaf4773",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Seems like you could use FindStringSubmatch and skip the conversion to []byte.",
      "range": {
        "startLine": 136,
        "startChar": 12,
        "endLine": 136,
        "endChar": 24
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "190df0c4_0a398953",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 164,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "s/attribut/attribute/",
      "range": {
        "startLine": 164,
        "startChar": 51,
        "endLine": 164,
        "endChar": 59
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a70b48df_e1ff4a38",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "I think converting a single number like this is easier to read if you call strconv.Atoi or strconv.ParseInt.\n\nSimilarly below.",
      "range": {
        "startLine": 185,
        "startChar": 21,
        "endLine": 185,
        "endChar": 62
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5416390_4ab15909",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 210,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Check scanner.Err().",
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ff6fe02_cf20eed2",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 240,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Check the error return of Close for a file opened for writing.  Probably also a good idea to check the error return of bw.Flush; no need to check error return of other bw methods, as bw will hold onto the error.",
      "range": {
        "startLine": 240,
        "startChar": 1,
        "endLine": 240,
        "endChar": 15
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c1eb8cf_b4a27c3e",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 318,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "No reason for\n    bw.WriteString(fmt.Sprintf(...))\nYou can just write\n    fmt.Fprintf(\u0026bw, ...)",
      "range": {
        "startLine": 318,
        "startChar": 1,
        "endLine": 318,
        "endChar": 55
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df5942a4_97830721",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 383,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Check scanner.Err().",
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52230319_5d995e39",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 443,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Check scanner.Err().",
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9bd83c5_fd6be7d6",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 530,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "outfile :\u003d os.Stdout",
      "range": {
        "startLine": 530,
        "startChar": 1,
        "endLine": 530,
        "endChar": 33
      },
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d942288_2b28bb5c",
        "filename": "driver/capture-fcn-attributes.go",
        "patchSetId": 3
      },
      "lineNbr": 558,
      "author": {
        "id": 5206
      },
      "writtenOn": "2018-06-19T14:03:26Z",
      "side": 1,
      "message": "Check error return of Close and Flush.",
      "revId": "76d6e1c95261d722daf53c1e9a63be00b9fe7707",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}